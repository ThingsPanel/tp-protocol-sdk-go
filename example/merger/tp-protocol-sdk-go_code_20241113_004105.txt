<documents>
<document index="README.md">
<source>README.md</source>
<document_content># TP Protocol SDK Go

ThingsPanel Protocol SDK for Go，用于快速开发ThingsPanel插件。

## 功能特性

- 设备配置管理
- 服务接入管理
- MQTT消息通信
- HTTP回调处理

## 安装

```bash
go get github.com/ThingsPanel/tp-protocol-sdk-go
```

## 快速开始

### HTTP回调服务

```go
package main

import (
    "log"
    "os"

    "github.com/ThingsPanel/tp-protocol-sdk-go/handler"
)

func main() {
    // 创建处理器
    h := handler.NewHandler(handler.HandlerConfig{
        Logger: log.New(os.Stdout, "[TP] ", log.LstdFlags),
    })

    // 设置表单配置处理函数
    h.SetFormConfigHandler(func(req *handler.GetFormConfigRequest) (interface{}, error) {
        return map[string]interface{}{
            "fields": []map[string]interface{}{
                {
                    "name":  "host",
                    "type":  "string",
                    "label": "服务器地址",
                },
            },
        }, nil
    })

    // 启动HTTP服务
    h.Start(":8080")
}
```

### MQTT客户端

```go
package main

import (
    "log"

    tp "github.com/ThingsPanel/tp-protocol-sdk-go/client"
)

func main() {
    // 创建客户端
    client := tp.NewClient("tcp://localhost:1883")

    // 连接MQTT服务器
    err := client.Connect()
    if err != nil {
        log.Fatal(err)
    }

    // 发送设备状态
    client.SendStatus("device-001", "1")
}
```

## API说明

### HTTP回调接口

- `/api/v1/form/config` - 获取表单配置
- `/api/v1/device/disconnect` - 设备断开通知
- `/api/v1/plugin/notification` - 事件通知
- `/api/v1/plugin/device/list` - 获取设备列表

### MQTT主题

- `devices/status/{device_id}` - 设备状态上报
- `plugin/{服务标识符}/` - 设备数据上报主题前缀，后面跟平台规范的直连设备主题
- `plugin/{服务标识符}/#` - 订阅平台数据主题，# 位置会是平台规范的直连设备订阅主题

## 目录结构

```text
tp-protocol-sdk-go/
├── client/       - 客户端实现
├── handler/      - HTTP回调处理
├── types/        - 数据类型定义
└── examples/     - 使用示例
```

## 开发文档

更多详细信息请参考[开发文档](https://docs.thingspanel.cn/docs/protocol-sdk-go/)

## License

This project is licensed under the GNU Affero General Public License v3.0 - see the [LICENSE](LICENSE) file for details.
</document_content>
</document>
<document index="client\api_client.go">
<source>client\api_client.go</source>
<document_content>// client/api_client.go

package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"time"
)

// APIClient TP平台API客户端
type APIClient struct {
	baseURL    string       // API基础URL
	httpClient *http.Client // HTTP客户端
	logger     *log.Logger  // 日志记录器
}

// APIClientOption 定义客户端配置选项
type APIClientOption func(*APIClient)

// WithTimeout 设置超时时间选项
func WithTimeout(timeout time.Duration) APIClientOption {
	return func(c *APIClient) {
		c.httpClient.Timeout = timeout
	}
}

// WithLogger 设置日志记录器选项
func WithLogger(logger *log.Logger) APIClientOption {
	return func(c *APIClient) {
		c.logger = logger
	}
}

// NewAPIClient 创建新的API客户端实例
func NewAPIClient(baseURL string, opts ...APIClientOption) *APIClient {
	client := &APIClient{
		baseURL: baseURL,
		httpClient: &http.Client{
			Timeout: 30 * time.Second,
		},
		logger: log.New(log.Writer(), "[TP-SDK] ", log.LstdFlags|log.Lshortfile),
	}

	// 应用配置选项
	for _, opt := range opts {
		opt(client)
	}

	client.logger.Printf("初始化API客户端: baseURL=%s", baseURL)
	return client
}

// doRequest 执行HTTP请求并处理响应
func (c *APIClient) doRequest(ctx context.Context, method, path string, reqBody, respBody interface{}) error {
	// 构建完整URL
	url := fmt.Sprintf("%s%s", c.baseURL, path)
	c.logger.Printf("准备发送请求: method=%s, url=%s", method, url)

	// 序列化请求体
	var bodyReader io.Reader
	if reqBody != nil {
		bodyBytes, err := json.Marshal(reqBody)
		if err != nil {
			c.logger.Printf("请求体序列化失败: %v", err)
			return fmt.Errorf("序列化请求体失败: %w", err)
		}
		bodyReader = bytes.NewReader(bodyBytes)
		c.logger.Printf("请求体: %s", string(bodyBytes))
	}

	// 创建请求
	req, err := http.NewRequestWithContext(ctx, method, url, bodyReader)
	if err != nil {
		c.logger.Printf("创建请求失败: %v", err)
		return fmt.Errorf("创建请求失败: %w", err)
	}

	// 设置请求头
	if reqBody != nil {
		req.Header.Set("Content-Type", "application/json")
	}
	req.Header.Set("Accept", "application/json")

	// 执行请求
	startTime := time.Now()
	resp, err := c.httpClient.Do(req)
	if err != nil {
		c.logger.Printf("请求执行失败: %v", err)
		return fmt.Errorf("执行请求失败: %w", err)
	}
	defer resp.Body.Close()

	// 记录请求耗时
	c.logger.Printf("请求完成: 耗时=%v, 状态码=%d", time.Since(startTime), resp.StatusCode)

	// 读取响应体
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		c.logger.Printf("读取响应体失败: %v", err)
		return fmt.Errorf("读取响应体失败: %w", err)
	}

	// 检查状态码
	if resp.StatusCode != http.StatusOK {
		c.logger.Printf("请求返回非200状态码: status=%d, body=%s", resp.StatusCode, string(body))
		return fmt.Errorf("请求失败，状态码: %d, 响应: %s", resp.StatusCode, string(body))
	}

	// 解析响应体
	if respBody != nil {
		if err := json.Unmarshal(body, respBody); err != nil {
			c.logger.Printf("响应体解析失败: %v, body=%s", err, string(body))
			return fmt.Errorf("解析响应体失败: %w", err)
		}
		c.logger.Printf("响应体解析成功")
	}

	return nil
}

// Get 执行GET请求
func (c *APIClient) Get(ctx context.Context, path string, response interface{}) error {
	return c.doRequest(ctx, http.MethodGet, path, nil, response)
}

// Post 执行POST请求
func (c *APIClient) Post(ctx context.Context, path string, request, response interface{}) error {
	return c.doRequest(ctx, http.MethodPost, path, request, response)
}
</document_content>
</document>
<document index="client\client.go">
<source>client\client.go</source>
<document_content>// client/client.go

package client

import (
	"fmt"
	"log"
)

// Client SDK主客户端，整合所有功能
type Client struct {
	// API客户端
	api     *APIClient
	device  *DeviceAPI
	service *ServiceAPI

	// MQTT客户端
	mqtt *MQTTClient

	// 日志
	logger *log.Logger
}

// ClientConfig SDK客户端配置
type ClientConfig struct {
	// API配置
	BaseURL    string
	APITimeout int // 秒

	// MQTT配置
	MQTTBroker   string
	MQTTClientID string
	MQTTUsername string
	MQTTPassword string

	// 日志配置
	Logger *log.Logger
}

// NewClient 创建新的SDK客户端实例
func NewClient(config ClientConfig) (*Client, error) {
	// 设置默认logger
	logger := config.Logger
	if logger == nil {
		logger = log.New(log.Writer(), "[TP-SDK] ", log.LstdFlags|log.Lshortfile)
	}

	logger.Printf("初始化SDK客户端")

	// 创建API客户端
	apiClient := NewAPIClient(config.BaseURL, WithLogger(logger))
	if apiClient == nil {
		return nil, fmt.Errorf("创建API客户端失败")
	}

	// 创建MQTT客户端
	mqttClient := NewMQTTClient(MQTTConfig{
		Broker:   config.MQTTBroker,
		ClientID: config.MQTTClientID,
		Username: config.MQTTUsername,
		Password: config.MQTTPassword,
	}, logger)
	if mqttClient == nil {
		return nil, fmt.Errorf("创建MQTT客户端失败")
	}

	// 创建设备API和服务API
	deviceAPI := NewDeviceAPI(apiClient)
	serviceAPI := NewServiceAPI(apiClient)

	return &Client{
		api:     apiClient,
		device:  deviceAPI,
		service: serviceAPI,
		mqtt:    mqttClient,
		logger:  logger,
	}, nil
}

// Connect 连接到平台
func (c *Client) Connect() error {
	c.logger.Printf("开始连接平台")

	// 连接MQTT
	if err := c.mqtt.Connect(); err != nil {
		c.logger.Printf("MQTT连接失败: %v", err)
		return fmt.Errorf("MQTT连接失败: %w", err)
	}

	c.logger.Printf("平台连接成功")
	return nil
}

// Device 获取设备API操作接口
func (c *Client) Device() *DeviceAPI {
	return c.device
}

// Service 获取服务API操作接口
func (c *Client) Service() *ServiceAPI {
	return c.service
}

// MQTT 获取MQTT客户端
func (c *Client) MQTT() *MQTTClient {
	return c.mqtt
}

// Close 关闭客户端连接
func (c *Client) Close() {
	c.logger.Printf("开始关闭客户端连接")

	// 断开MQTT连接
	if c.mqtt != nil {
		c.mqtt.Disconnect()
	}

	c.logger.Printf("客户端连接已关闭")
}
</document_content>
</document>
<document index="client\device_api.go">
<source>client\device_api.go</source>
<document_content>// client/device_api.go

package client

import (
	"context"
	"fmt"

	"github.com/ThingsPanel/tp-protocol-sdk-go/types"
)

// DeviceAPI 设备相关API封装
type DeviceAPI struct {
	client *APIClient
}

// DeviceConfigRequest 获取设备配置请求
type DeviceConfigRequest struct {
	DeviceID     string `json:"device_id"`
	Voucher      string `json:"voucher"`
	DeviceNumber string `json:"device_number"`
}

// DeviceConfigResponse 设备配置响应
type DeviceConfigResponse struct {
	Code    int          `json:"code"`
	Message string       `json:"message"`
	Data    types.Device `json:"data"`
}

// NewDeviceAPI 创建设备API实例
func NewDeviceAPI(client *APIClient) *DeviceAPI {
	return &DeviceAPI{
		client: client,
	}
}

// GetDeviceConfig 获取设备配置信息
func (d *DeviceAPI) GetDeviceConfig(ctx context.Context, req *DeviceConfigRequest) (*DeviceConfigResponse, error) {
	d.client.logger.Printf("开始获取设备配置: deviceID=%s", req.DeviceID)

	var resp DeviceConfigResponse
	err := d.client.Post(ctx, "/api/v1/plugin/device/config", req, &resp)
	if err != nil {
		d.client.logger.Printf("获取设备配置失败: %v", err)
		return nil, fmt.Errorf("获取设备配置失败: %w", err)
	}

	d.client.logger.Printf("获取设备配置成功: deviceID=%s, deviceType=%s",
		req.DeviceID, resp.Data.DeviceType)
	return &resp, nil
}
</document_content>
</document>
<document index="client\mqtt_client.go">
<source>client\mqtt_client.go</source>
<document_content>// client/mqtt_client.go

package client

import (
	"fmt"
	"log"
	"time"

	mqtt "github.com/eclipse/paho.mqtt.golang"
)

// MQTTClient MQTT客户端封装
type MQTTClient struct {
	client    mqtt.Client
	logger    *log.Logger
	broker    string
	clientID  string
	username  string
	password  string
	connected bool
}

// MessageHandler 定义消息处理函数类型
type MessageHandler func(topic string, payload []byte)

// MQTTConfig MQTT配置项
type MQTTConfig struct {
	Broker   string
	ClientID string
	Username string
	Password string
}

// NewMQTTClient 创建MQTT客户端实例
func NewMQTTClient(config MQTTConfig, logger *log.Logger) *MQTTClient {
	if logger == nil {
		logger = log.New(log.Writer(), "[TP-MQTT] ", log.LstdFlags|log.Lshortfile)
	}

	return &MQTTClient{
		broker:   config.Broker,
		clientID: config.ClientID,
		username: config.Username,
		password: config.Password,
		logger:   logger,
	}
}

// Connect 连接到MQTT服务器
func (m *MQTTClient) Connect() error {
	m.logger.Printf("开始连接MQTT服务器: broker=%s, clientID=%s", m.broker, m.clientID)

	opts := mqtt.NewClientOptions().
		AddBroker(m.broker).
		SetClientID(m.clientID).
		SetUsername(m.username).
		SetPassword(m.password).
		SetAutoReconnect(true).
		SetCleanSession(true).
		SetKeepAlive(30 * time.Second).
		SetConnectTimeout(30 * time.Second)

	// 设置连接丢失处理函数
	opts.SetConnectionLostHandler(func(client mqtt.Client, err error) {
		m.logger.Printf("MQTT连接丢失: %v", err)
		m.connected = false
	})

	// 设置连接建立处理函数
	opts.SetOnConnectHandler(func(client mqtt.Client) {
		m.logger.Printf("MQTT连接成功建立")
		m.connected = true
	})

	// 创建客户端实例
	m.client = mqtt.NewClient(opts)

	// 尝试连接
	if token := m.client.Connect(); token.Wait() && token.Error() != nil {
		m.logger.Printf("MQTT连接失败: %v", token.Error())
		return fmt.Errorf("MQTT连接失败: %w", token.Error())
	}

	m.logger.Printf("MQTT连接成功")
	return nil
}

// Publish 发布消息
func (m *MQTTClient) Publish(topic string, qos byte, payload interface{}) error {
	if !m.connected {
		return fmt.Errorf("MQTT客户端未连接")
	}

	m.logger.Printf("准备发布消息: topic=%s, qos=%d", topic, qos)

	token := m.client.Publish(topic, qos, false, payload)
	if token.Wait() && token.Error() != nil {
		m.logger.Printf("消息发布失败: %v", token.Error())
		return fmt.Errorf("消息发布失败: %w", token.Error())
	}

	m.logger.Printf("消息发布成功")
	return nil
}

// Subscribe 订阅主题
func (m *MQTTClient) Subscribe(topic string, qos byte, handler MessageHandler) error {
	if !m.connected {
		return fmt.Errorf("MQTT客户端未连接")
	}

	m.logger.Printf("准备订阅主题: topic=%s, qos=%d", topic, qos)

	// 将自定义的MessageHandler转换为mqtt.MessageHandler
	wrapper := func(client mqtt.Client, msg mqtt.Message) {
		handler(msg.Topic(), msg.Payload())
	}

	token := m.client.Subscribe(topic, qos, wrapper)
	if token.Wait() && token.Error() != nil {
		m.logger.Printf("主题订阅失败: %v", token.Error())
		return fmt.Errorf("主题订阅失败: %w", token.Error())
	}

	m.logger.Printf("主题订阅成功")
	return nil
}

// Disconnect 断开MQTT连接
func (m *MQTTClient) Disconnect() {
	if m.connected {
		m.logger.Printf("准备断开MQTT连接")
		m.client.Disconnect(250)
		m.connected = false
		m.logger.Printf("MQTT连接已断开")
	}
}

// IsConnected 检查是否已连接
func (m *MQTTClient) IsConnected() bool {
	return m.connected
}
</document_content>
</document>
<document index="client\service_api.go">
<source>client\service_api.go</source>
<document_content>// client/service_api.go

package client

import (
	"context"
	"fmt"

	"github.com/ThingsPanel/tp-protocol-sdk-go/types"
)

// ServiceAPI 服务接入相关API封装
type ServiceAPI struct {
	client *APIClient
}

// ServiceAccessRequest 获取服务接入点请求
type ServiceAccessRequest struct {
	ServiceAccessID   string `json:"service_access_id"`
	ServiceIdentifier string `json:"service_identifier"`
}

// ServiceAccessResponse 服务接入响应
type ServiceAccessResponse struct {
	Code    int                 `json:"code"`
	Message string              `json:"message"`
	Data    types.ServiceAccess `json:"data"`
}

// HeartbeatRequest 心跳请求
type HeartbeatRequest struct {
	ServiceIdentifier string `json:"service_identifier"`
}

// HeartbeatResponse 心跳响应
type HeartbeatResponse struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// NewServiceAPI 创建服务API实例
func NewServiceAPI(client *APIClient) *ServiceAPI {
	return &ServiceAPI{
		client: client,
	}
}

// 获取服务接入点列表
func (s *ServiceAPI) GetServiceAccessList(ctx context.Context, req *ServiceAccessRequest) ([]types.ServiceAccessRsp, error) {
	s.client.logger.Printf("开始获取服务接入点列表: serviceIdentifier=%s", req.ServiceIdentifier)

	var resp []types.ServiceAccessRsp
	err := s.client.Post(ctx, "/api/v1/plugin/service/access/list", req, &resp)
	if err != nil {
		s.client.logger.Printf("获取服务接入点列表失败: %v", err)
		return nil, fmt.Errorf("获取服务接入点列表失败: %w", err)
	}

	s.client.logger.Printf("获取服务接入点列表成功: serviceIdentifier=%s",
		req.ServiceIdentifier)
	return resp, nil
}

// GetServiceAccess 获取服务接入点信息
func (s *ServiceAPI) GetServiceAccess(ctx context.Context, req *ServiceAccessRequest) (*ServiceAccessResponse, error) {
	s.client.logger.Printf("开始获取服务接入点信息: serviceAccessID=%s", req.ServiceAccessID)

	var resp ServiceAccessResponse
	err := s.client.Post(ctx, "/api/v1/plugin/service/access", req, &resp)
	if err != nil {
		s.client.logger.Printf("获取服务接入点信息失败: %v", err)
		return nil, fmt.Errorf("获取服务接入点信息失败: %w", err)
	}

	s.client.logger.Printf("获取服务接入点信息成功: serviceIdentifier=%s",
		resp.Data.ServiceIdentifier)
	return &resp, nil
}

// SendHeartbeat 发送服务心跳
func (s *ServiceAPI) SendHeartbeat(ctx context.Context, req *HeartbeatRequest) (*HeartbeatResponse, error) {
	s.client.logger.Printf("开始发送服务心跳: serviceIdentifier=%s", req.ServiceIdentifier)

	var resp HeartbeatResponse
	err := s.client.Post(ctx, "/api/v1/plugin/heartbeat", req, &resp)
	if err != nil {
		s.client.logger.Printf("发送服务心跳失败: %v", err)
		return nil, fmt.Errorf("发送服务心跳失败: %w", err)
	}

	s.client.logger.Printf("发送服务心跳成功")
	return &resp, nil
}
</document_content>
</document>
<document index="docs\发布指南.md">
<source>docs\发布指南.md</source>
<document_content># 发布指南

## 版本号规范

遵循语义化版本（Semantic Versioning）:

- 主版本号(Major): 不兼容的API修改，如 v1.0.0 -> v2.0.0
- 次版本号(Minor): 新功能，如 v1.0.0 -> v1.1.0
- 修订号(Patch): 问题修复，如 v1.0.0 -> v1.0.1

## 发布步骤

### 1. 发布准备

- 确保代码已合并到 main 分支
- 运行测试: `go test ./...`
- 检查并更新依赖: `go mod tidy`

### 2. GitHub发布操作

1. 访问GitHub仓库的 Releases 页面
2. 点击 "Draft a new release"
3. 创建新标签，格式为 `vX.Y.Z`（如 v1.0.0）
4. 设置标题为 `Release vX.Y.Z`
5. 填写发布说明，使用以下模板：

```markdown
# Release vX.Y.Z

## 新功能
- xxx
- xxx

## 问题修复
- xxx
- xxx

## 破坏性变更
- xxx (如果有)

## 升级说明
- xxx (如有必要)
```

6. 点击 "Publish release"

## 发布前检查清单

- [ ] 代码已完成测试
- [ ] 示例代码可正常运行
- [ ] 文档已更新
- [ ] 依赖已更新 (go.mod)

## 注意事项

1. 版本号不要重复
2. 重要更新需更新 README
3. 列出主要变更内容
4. 标注任何破坏性变更
</document_content>
</document>
<document index="docs\流程图.md">
<source>docs\流程图.md</source>
<document_content># 流程图

```mermaid
sequenceDiagram
    participant App
    participant Client
    participant API
    participant MQTT
    participant Platform

    App->>Client: 创建客户端
    Client->>API: 初始化API客户端
    Client->>MQTT: 初始化MQTT客户端
    
    App->>Client: 获取设备配置
    Client->>API: 发送配置请求
    API->>Platform: HTTP请求
    Platform-->>API: 返回配置
    API-->>Client: 解析配置
    Client-->>App: 返回结果
    
    App->>Client: 连接MQTT
    Client->>MQTT: 建立连接
    MQTT->>Platform: MQTT Connect
    Platform-->>MQTT: 确认连接
    
    loop 心跳
        Client->>Platform: 发送心跳
        Platform-->>Client: 心跳响应
    end
```
</document_content>
</document>
<document index="docs\设计.md">
<source>docs\设计.md</source>
<document_content># TP Protocol SDK 设计方案

## 1. 目录结构

```text
tp-protocol-sdk-go/
├── client/                # 客户端实现
│   ├── client.go         # SDK主入口
│   ├── api.go            # API请求封装
│   └── mqtt.go           # MQTT客户端
├── types/                # 数据类型定义
│   ├── device.go        # 设备相关结构体
│   ├── service.go       # 服务相关结构体
│   └── response.go      # 通用响应结构体 
├── handler/             # HTTP处理器
│   └── handler.go       # 回调处理
├── examples/            # 使用示例
│   ├── device/         # 设备管理示例
│   ├── service/        # 服务管理示例
│   └── mqtt/           # MQTT使用示例
└── README.md           # 使用文档
```

## 2. 核心模块职责

### 2.1 Client

```go
// Client SDK主入口
type Client struct {
    api  *APIClient    // API客户端
    mqtt *MQTTClient   // MQTT客户端
}

// APIClient 处理HTTP请求
type APIClient struct {
    baseURL    string
    httpClient *http.Client
}

// MQTTClient 处理MQTT通信
type MQTTClient struct {
    client  mqtt.Client
    options *MQTTOptions
}
```

### 2.2 Types

```go
// 请求/响应结构体
type DeviceConfig struct {...}
type ServiceConfig struct {...}
type Response struct {...}
```

### 2.3 Handler

```go
// Handler 处理平台回调
type Handler struct {
    OnGetForm           func(w http.ResponseWriter, r *http.Request)
    OnDisconnectDevice  func(w http.ResponseWriter, r *http.Request)
    OnNotifyEvent       func(w http.ResponseWriter, r *http.Request)
}
```

## 3. 主要功能流程

1. 设备管理:
   - 获取设备配置
   - 设备列表查询
   - 设备状态上报

2. 服务接入:
   - 获取服务配置
   - 服务列表查询
   - 心跳维护

3. 消息通信:
   - MQTT连接管理
   - 消息发布订阅
   - 在线状态维护
</document_content>
</document>
<document index="example\handler\client\main.go">
<source>example\handler\client\main.go</source>
<document_content>// examples/handler/client/main.go

package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"net/url"
	"os"
)

func main() {
	logger := log.New(os.Stdout, "[Client] ", log.LstdFlags|log.Lshortfile)
	baseURL := "http://localhost:8080"

	// 1. 测试获取表单配置
	logger.Println("测试获取表单配置...")
	formConfig := testGetFormConfig(baseURL, logger)
	logger.Printf("表单配置: %+v\n", formConfig)

	// 2. 测试设备断开连接
	logger.Println("\n测试设备断开连接...")
	testDeviceDisconnect(baseURL, "device-001", logger)

	// 3. 测试发送通知
	logger.Println("\n测试发送通知...")
	testSendNotification(baseURL, logger)

	// 4. 测试获取设备列表
	logger.Println("\n测试获取设备列表...")
	deviceList := testGetDeviceList(baseURL, logger)
	logger.Printf("设备列表: %+v\n", deviceList)
}

// 获取表单配置
func testGetFormConfig(baseURL string, logger *log.Logger) map[string]interface{} {
	// 构建请求URL和参数
	params := url.Values{}
	params.Add("protocol_type", "modbus")
	params.Add("device_type", "1")
	params.Add("form_type", "CFG")

	url := fmt.Sprintf("%s/api/v1/form/config?%s", baseURL, params.Encode())

	resp, err := http.Get(url)
	if err != nil {
		logger.Fatalf("请求失败: %v", err)
	}
	defer resp.Body.Close()

	var result map[string]interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		logger.Fatalf("解析响应失败: %v", err)
	}

	return result
}

// 测试设备断开连接
func testDeviceDisconnect(baseURL string, deviceID string, logger *log.Logger) {
	reqBody, err := json.Marshal(map[string]string{
		"device_id": deviceID,
	})
	if err != nil {
		logger.Fatalf("构建请求体失败: %v", err)
	}

	resp, err := http.Post(
		fmt.Sprintf("%s/api/v1/device/disconnect", baseURL),
		"application/json",
		bytes.NewBuffer(reqBody),
	)
	if err != nil {
		logger.Fatalf("请求失败: %v", err)
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		logger.Fatalf("读取响应失败: %v", err)
	}

	logger.Printf("响应: %s", string(body))
}

// 测试发送通知
func testSendNotification(baseURL string, logger *log.Logger) {
	notifyData := map[string]string{
		"message_type": "1",
		"message":      `{"service_access_id":"service-001"}`,
	}

	reqBody, err := json.Marshal(notifyData)
	if err != nil {
		logger.Fatalf("构建请求体失败: %v", err)
	}

	resp, err := http.Post(
		fmt.Sprintf("%s/api/v1/plugin/notification", baseURL),
		"application/json",
		bytes.NewBuffer(reqBody),
	)
	if err != nil {
		logger.Fatalf("请求失败: %v", err)
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		logger.Fatalf("读取响应失败: %v", err)
	}

	logger.Printf("响应: %s", string(body))
}

// 测试获取设备列表
func testGetDeviceList(baseURL string, logger *log.Logger) map[string]interface{} {
	// 构建请求URL和参数
	params := url.Values{}
	params.Add("voucher", "test-voucher")
	params.Add("service_identifier", "test-service")
	params.Add("page_size", "10")
	params.Add("page", "1")

	url := fmt.Sprintf("%s/api/v1/plugin/device/list?%s", baseURL, params.Encode())

	resp, err := http.Get(url)
	if err != nil {
		logger.Fatalf("请求失败: %v", err)
	}
	defer resp.Body.Close()

	var result map[string]interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		logger.Fatalf("解析响应失败: %v", err)
	}

	return result
}
</document_content>
</document>
<document index="example\handler\main.go">
<source>example\handler\main.go</source>
<document_content>// examples/handler/main.go

package main

import (
	"log"
	"os"

	"github.com/ThingsPanel/tp-protocol-sdk-go/handler"
)

func main() {
	logger := log.New(os.Stdout, "[TP-Example] ", log.LstdFlags|log.Lshortfile)

	// 创建处理器
	h := handler.NewHandler(handler.HandlerConfig{
		Logger: logger,
	})

	// 设置表单配置处理函数
	h.SetFormConfigHandler(func(req *handler.GetFormConfigRequest) (interface{}, error) {
		logger.Printf("收到表单配置请求: type=%s", req.FormType)
		return map[string]interface{}{
			"fields": []map[string]interface{}{
				{
					"name":  "host",
					"type":  "string",
					"label": "服务器地址",
				},
				{
					"name":  "port",
					"type":  "number",
					"label": "端口",
				},
			},
		}, nil
	})

	// 设置设备断开连接处理函数
	h.SetDeviceDisconnectHandler(func(req *handler.DeviceDisconnectRequest) error {
		logger.Printf("设备断开连接: %s", req.DeviceID)
		return nil
	})

	// 设置通知处理函数
	h.SetNotificationHandler(func(req *handler.NotificationRequest) error {
		logger.Printf("收到通知: type=%s", req.MessageType)
		return nil
	})

	// 设置获取设备列表处理函数
	h.SetGetDeviceListHandler(func(req *handler.GetDeviceListRequest) (*handler.DeviceListResponse, error) {
		logger.Printf("获取设备列表: page=%d, pageSize=%d", req.Page, req.PageSize)
		return &handler.DeviceListResponse{
			Code:    200,
			Message: "success",
			Data: handler.DeviceListData{
				List: []handler.DeviceItem{
					{
						DeviceName:   "设备1",
						Description:  "测试设备1",
						DeviceNumber: "DEV001",
					},
					{
						DeviceName:   "设备2",
						Description:  "测试设备2",
						DeviceNumber: "DEV002",
					},
				},
				Total: 2,
			},
		}, nil
	})

	// 启动HTTP服务
	logger.Printf("启动HTTP服务...")
	if err := h.Start(":8080"); err != nil {
		logger.Fatalf("服务启动失败: %v", err)
	}
}
</document_content>
</document>
<document index="example\main.go">
<source>example\main.go</source>
<document_content>// examples/main.go

package main

import (
	"context"
	"log"
	"os"
	"time"

	"github.com/ThingsPanel/tp-protocol-sdk-go/client"
)

func main() {
	// 创建logger
	logger := log.New(os.Stdout, "[TP-Example] ", log.LstdFlags|log.Lshortfile)

	// 创建客户端配置
	config := client.ClientConfig{
		BaseURL:      "http://c.thingspanel.cn",
		MQTTBroker:   "mqtt://47.92.253.145:1883",
		MQTTClientID: "example-client",
		MQTTUsername: "plugin",
		MQTTPassword: "plugin",
		Logger:       logger,
	}

	// 创建SDK客户端
	c, err := client.NewClient(config)
	if err != nil {
		logger.Fatalf("创建客户端失败: %v", err)
	}
	defer c.Close()

	// 连接平台
	if err := c.Connect(); err != nil {
		logger.Fatalf("连接平台失败: %v", err)
	}

	// 获取设备配置示例
	deviceReq := &client.DeviceConfigRequest{
		DeviceID: "af13ac2c-3a9e-5ab9-cd31-0cf01f984b3c",
	}

	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	deviceResp, err := c.Device().GetDeviceConfig(ctx, deviceReq)
	if err != nil {
		logger.Printf("获取设备配置失败: %v", err)
	} else {
		logger.Printf("设备配置: %+v", deviceResp.Data)
	}

	// 发送服务心跳示例
	heartbeatReq := &client.HeartbeatRequest{
		ServiceIdentifier: "test3",
	}

	heartbeatResp, err := c.Service().SendHeartbeat(ctx, heartbeatReq)
	if err != nil {
		logger.Printf("发送心跳失败: %v", err)
	} else {
		logger.Printf("心跳响应: %+v", heartbeatResp)
	}

	// MQTT消息订阅示例
	err = c.MQTT().Subscribe("plugin/example/+", 1, func(topic string, payload []byte) {
		logger.Printf("收到消息: topic=%s, payload=%s", topic, string(payload))
	})
	if err != nil {
		logger.Printf("订阅主题失败: %v", err)
	}

	// 发布消息示例
	err = c.MQTT().Publish("devices/status/af13ac2c-3a9e-5ab9-cd31-0cf01f984b3c", 1, 1)
	if err != nil {
		logger.Printf("发布消息失败: %v", err)
	}

	// 保持运行一段时间
	time.Sleep(600 * time.Second)
}
</document_content>
</document>
<document index="example\merger\main.go">
<source>example\merger\main.go</source>
<document_content>package main

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"
	"time"
)

const (
	// 项目名称，用于验证
	PROJECT_NAME = "tp-protocol-sdk-go"

	// 项目源码所在的相对路径
	PROJECT_PATH = "../../../" + PROJECT_NAME
)

// 允许的文件类型
var allowedExtensions = map[string]bool{
	".go":   true,
	".mod":  true,
	".sum":  true,
	".yaml": true,
	".yml":  true,
	".md":   true,
}

func main() {
	sourceDir, err := filepath.Abs(PROJECT_PATH)
	if err != nil {
		fmt.Printf("获取项目路径失败: %v\n", err)
		return
	}

	// 验证目录名称
	if !strings.HasSuffix(sourceDir, PROJECT_NAME) {
		fmt.Printf("错误: 当前目录 %s 不是目标项目目录\n", sourceDir)
		fmt.Printf("请确保在正确的位置执行此工具\n")
		return
	}

	// 检查目录是否存在
	if _, err := os.Stat(sourceDir); os.IsNotExist(err) {
		fmt.Printf("错误: 项目目录不存在: %s\n", sourceDir)
		fmt.Printf("请检查项目路径是否正确\n")
		return
	}

	outputFile := fmt.Sprintf("%s_code_%s.txt", PROJECT_NAME, time.Now().Format("20060102_150405"))
	out, err := os.Create(outputFile)
	if err != nil {
		fmt.Printf("创建输出文件失败: %v\n", err)
		return
	}
	defer out.Close()

	fmt.Printf("开始处理项目: %s\n", PROJECT_NAME)
	fmt.Printf("项目路径: %s\n", sourceDir)

	// 写入文档开始标签
	fmt.Fprintf(out, "<documents>")

	fileCount := 0
	err = filepath.Walk(sourceDir, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}

		// 跳过隐藏文件和目录
		if strings.HasPrefix(info.Name(), ".") {
			if info.IsDir() {
				return filepath.SkipDir
			}
			return nil
		}

		// 跳过日志文件和目录
		if strings.Contains(path, "logs") || strings.HasSuffix(path, ".log") {
			if info.IsDir() {
				return filepath.SkipDir
			}
			return nil
		}

		// 如果是目录，继续遍历
		if info.IsDir() {
			return nil
		}

		// 检查文件类型
		ext := strings.ToLower(filepath.Ext(path))
		if !allowedExtensions[ext] {
			return nil
		}

		// 获取相对路径
		relPath, err := filepath.Rel(sourceDir, path)
		if err != nil {
			return fmt.Errorf("获取相对路径失败: %v", err)
		}

		// 写入文件信息
		fmt.Fprintf(out, "\n<document index=\"%s\">\n", relPath)
		fmt.Fprintf(out, "<source>%s</source>\n", relPath)
		fmt.Fprintf(out, "<document_content>")

		// 读取文件内容
		content, err := os.ReadFile(path)
		if err != nil {
			return fmt.Errorf("读取文件 %s 失败: %v", path, err)
		}

		// 写入内容
		fmt.Fprintf(out, "%s", content)
		fmt.Fprintf(out, "</document_content>\n")
		fmt.Fprintf(out, "</document>")

		fileCount++
		fmt.Printf("处理文件(%d): %s\n", fileCount, relPath)
		return nil
	})

	fmt.Fprintf(out, "</documents>")

	if err != nil {
		fmt.Printf("\n处理过程中发生错误: %v\n", err)
		return
	}

	fmt.Printf("\n处理完成!\n")
	fmt.Printf("共处理 %d 个文件\n", fileCount)
	fmt.Printf("输出文件: %s\n", outputFile)
}
</document_content>
</document>
<document index="go.mod">
<source>go.mod</source>
<document_content>module github.com/ThingsPanel/tp-protocol-sdk-go

go 1.22

require github.com/eclipse/paho.mqtt.golang v1.4.3

require (
	github.com/gorilla/websocket v1.5.0 // indirect
	golang.org/x/net v0.8.0 // indirect
	golang.org/x/sync v0.1.0 // indirect
)
</document_content>
</document>
<document index="go.sum">
<source>go.sum</source>
<document_content>github.com/eclipse/paho.mqtt.golang v1.4.3 h1:2kwcUGn8seMUfWndX0hGbvH8r7crgcJguQNCyp70xik=
github.com/eclipse/paho.mqtt.golang v1.4.3/go.mod h1:CSYvoAlsMkhYOXh/oKyxa8EcBci6dVkLCbo5tTC1RIE=
github.com/gorilla/websocket v1.5.0 h1:PPwGk2jz7EePpoHN/+ClbZu8SPxiqlu12wZP/3sWmnc=
github.com/gorilla/websocket v1.5.0/go.mod h1:YR8l580nyteQvAITg2hZ9XVh4b55+EU/adAjf1fMHhE=
golang.org/x/net v0.8.0 h1:Zrh2ngAOFYneWTAIAPethzeaQLuHwhuBkuV6ZiRnUaQ=
golang.org/x/net v0.8.0/go.mod h1:QVkue5JL9kW//ek3r6jTKnTFis1tRmNAW2P1shuFdJc=
golang.org/x/sync v0.1.0 h1:wsuoTGHzEhffawBOhz5CYhcrV4IdKZbEyZjBMuTp12o=
golang.org/x/sync v0.1.0/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
</document_content>
</document>
<document index="handler\handler.go">
<source>handler\handler.go</source>
<document_content>// handler/handler.go

package handler

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"strconv"
)

// HandlerConfig 处理器配置
type HandlerConfig struct {
	Logger *log.Logger // 日志记录器
}

// Handler 回调处理器
type Handler struct {
	logger                  *log.Logger
	formConfigHandler       func(req *GetFormConfigRequest) (interface{}, error)
	deviceDisconnectHandler func(req *DeviceDisconnectRequest) error
	notificationHandler     func(req *NotificationRequest) error
	getDeviceListHandler    func(req *GetDeviceListRequest) (*DeviceListResponse, error)
}

// NewHandler 创建一个新的处理器实例
func NewHandler(config HandlerConfig) *Handler {
	logger := config.Logger
	if logger == nil {
		logger = log.New(log.Writer(), "[TP-Handler] ", log.LstdFlags|log.Lshortfile)
	}

	return &Handler{
		logger: logger,
	}
}

// parseQueryParams 解析查询参数
func parseQueryParams(r *http.Request, obj interface{}) error {
	// 这里可以使用反射来实现，为了简单起见，我们针对具体类型处理
	switch v := obj.(type) {
	case *GetFormConfigRequest:
		v.ProtocolType = r.URL.Query().Get("protocol_type")
		v.DeviceType = r.URL.Query().Get("device_type")
		v.FormType = r.URL.Query().Get("form_type")

		// 验证必填参数
		if v.ProtocolType == "" || v.DeviceType == "" || v.FormType == "" {
			return fmt.Errorf("missing required query parameters")
		}

	case *GetDeviceListRequest:
		v.Voucher = r.URL.Query().Get("voucher")
		v.ServiceIdentifier = r.URL.Query().Get("service_identifier")

		pageSize := r.URL.Query().Get("page_size")
		page := r.URL.Query().Get("page")

		if v.Voucher == "" || v.ServiceIdentifier == "" || pageSize == "" || page == "" {
			return fmt.Errorf("missing required query parameters")
		}

		var err error
		v.PageSize, err = strconv.Atoi(pageSize)
		if err != nil {
			return fmt.Errorf("invalid page_size")
		}

		v.Page, err = strconv.Atoi(page)
		if err != nil {
			return fmt.Errorf("invalid page")
		}
	}
	return nil
}

func (h *Handler) handleFormConfig(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodGet {
		h.writeError(w, http.StatusMethodNotAllowed, "method not allowed")
		return
	}

	var req GetFormConfigRequest
	if err := parseQueryParams(r, &req); err != nil {
		h.writeError(w, http.StatusBadRequest, err.Error())
		return
	}

	data, err := h.formConfigHandler(&req)
	if err != nil {
		h.writeError(w, http.StatusInternalServerError, err.Error())
		return
	}

	h.writeResponse(w, http.StatusOK, "success", data)
}

func (h *Handler) handleDeviceDisconnect(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodPost {
		h.writeError(w, http.StatusMethodNotAllowed, "method not allowed")
		return
	}

	var req DeviceDisconnectRequest
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		h.writeError(w, http.StatusBadRequest, "invalid request body")
		return
	}

	if err := h.deviceDisconnectHandler(&req); err != nil {
		h.writeError(w, http.StatusInternalServerError, err.Error())
		return
	}

	h.writeResponse(w, http.StatusOK, "success", nil)
}

func (h *Handler) handleNotification(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodPost {
		h.writeError(w, http.StatusMethodNotAllowed, "method not allowed")
		return
	}

	var req NotificationRequest
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		h.writeError(w, http.StatusBadRequest, "invalid request body")
		return
	}

	if err := h.notificationHandler(&req); err != nil {
		h.writeError(w, http.StatusInternalServerError, err.Error())
		return
	}

	h.writeResponse(w, http.StatusOK, "success", nil)
}

func (h *Handler) handleGetDeviceList(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodGet {
		h.writeError(w, http.StatusMethodNotAllowed, "method not allowed")
		return
	}

	var req GetDeviceListRequest
	if err := parseQueryParams(r, &req); err != nil {
		h.writeError(w, http.StatusBadRequest, err.Error())
		return
	}

	resp, err := h.getDeviceListHandler(&req)
	if err != nil {
		h.writeError(w, http.StatusInternalServerError, err.Error())
		return
	}

	h.writeResponse(w, http.StatusOK, "success", resp.Data)
}

func (h *Handler) writeError(w http.ResponseWriter, code int, message string) {
	h.writeResponse(w, code, message, nil)
}

func (h *Handler) writeResponse(w http.ResponseWriter, code int, message string, data interface{}) {
	w.Header().Set("Content-Type", "application/json")
	resp := CommonResponse{
		Code:    code,
		Message: message,
		Data:    data,
	}
	json.NewEncoder(w).Encode(resp)
}

// ServeHTTP 实现 http.Handler 接口
func (h *Handler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	h.logger.Printf("收到请求: %s %s", r.Method, r.URL.Path)

	switch r.URL.Path {
	case "/api/v1/form/config":
		h.handleFormConfig(w, r)
	case "/api/v1/device/disconnect":
		h.handleDeviceDisconnect(w, r)
	case "/api/v1/plugin/notification":
		h.handleNotification(w, r)
	case "/api/v1/plugin/device/list":
		h.handleGetDeviceList(w, r)
	default:
		http.NotFound(w, r)
	}
}

// SetFormConfigHandler 设置表单配置处理函数
func (h *Handler) SetFormConfigHandler(handler func(req *GetFormConfigRequest) (interface{}, error)) {
	h.formConfigHandler = handler
}

// SetDeviceDisconnectHandler 设置设备断开处理函数
func (h *Handler) SetDeviceDisconnectHandler(handler func(req *DeviceDisconnectRequest) error) {
	h.deviceDisconnectHandler = handler
}

// SetNotificationHandler 设置通知处理函数
func (h *Handler) SetNotificationHandler(handler func(req *NotificationRequest) error) {
	h.notificationHandler = handler
}

// SetGetDeviceListHandler 设置获取设备列表处理函数
func (h *Handler) SetGetDeviceListHandler(handler func(req *GetDeviceListRequest) (*DeviceListResponse, error)) {
	h.getDeviceListHandler = handler
}

// Start 启动HTTP服务
func (h *Handler) Start(addr string) error {
	h.logger.Printf("启动HTTP服务: %s", addr)
	return http.ListenAndServe(addr, h)
}
</document_content>
</document>
<document index="handler\types.go">
<source>handler\types.go</source>
<document_content>// handler/types.go

package handler

// GetFormConfigRequest 获取表单配置请求
type GetFormConfigRequest struct {
	ProtocolType string `form:"protocol_type" binding:"required"` // 协议/服务标识符
	DeviceType   string `form:"device_type" binding:"required"`   // 1-设备 2-网关 3-子设备
	FormType     string `form:"form_type" binding:"required"`     // CFG-配置表单 VCR-凭证表单 SVCR-服务凭证表单
}

// DeviceDisconnectRequest 设备断开连接请求
type DeviceDisconnectRequest struct {
	DeviceID string `json:"device_id" binding:"required"`
}

// NotificationRequest 通知请求
type NotificationRequest struct {
	MessageType string `json:"message_type" binding:"required"` // 1-服务配置修改
	Message     string `json:"message,omitempty"`               // 消息内容
}

// GetDeviceListRequest 获取设备列表请求
type GetDeviceListRequest struct {
	Voucher           string `form:"voucher" binding:"required"`            // 凭证
	ServiceIdentifier string `form:"service_identifier" binding:"required"` // 服务标识符
	PageSize          int    `form:"page_size" binding:"required"`          // 每页数量
	Page              int    `form:"page" binding:"required"`               // 页数
}

// DeviceItem 设备列表项
type DeviceItem struct {
	DeviceName   string `json:"device_name"`
	Description  string `json:"description"`
	DeviceNumber string `json:"device_number"`
}

// DeviceListData 设备列表数据
type DeviceListData struct {
	List  []DeviceItem `json:"list"`
	Total int          `json:"total"`
}

// CommonResponse 通用响应结构
type CommonResponse struct {
	Code    int         `json:"code"`
	Message string      `json:"message"`
	Data    interface{} `json:"data,omitempty"`
}

// DeviceListResponse 设备列表响应
type DeviceListResponse struct {
	Code    int            `json:"code"`
	Message string         `json:"message"`
	Data    DeviceListData `json:"data"`
}
</document_content>
</document>
<document index="types\types.go">
<source>types\types.go</source>
<document_content>package types

// Device 设备信息结构体
type Device struct {
	ID           string                 `json:"id"`
	Voucher      string                 `json:"voucher"`
	DeviceNumber string                 `json:"device_number"`
	DeviceType   string                 `json:"device_type"`
	ProtocolType string                 `json:"protocol_type"`
	SubDevices   []SubDevice            `json:"sub_devices,omitempty"`
	Config       map[string]interface{} `json:"config"`
}

// SubDevice 子设备信息结构体
type SubDevice struct {
	DeviceID      string                 `json:"device_id"`
	Voucher       string                 `json:"voucher"`
	DeviceNumber  string                 `json:"device_number"`
	SubDeviceAddr string                 `json:"sub_device_addr"`
	Config        map[string]interface{} `json:"config"`
}

// ServiceAccess 服务接入信息结构体
type ServiceAccess struct {
	ServiceAccessID   string   `json:"service_access_id"`
	ServiceIdentifier string   `json:"service_identifier"`
	Voucher           string   `json:"voucher"`
	Description       string   `json:"description"`
	Remark            string   `json:"remark"`
	Devices           []Device `json:"devices"`
}

// CommonResponse 通用响应结构体
type CommonResponse struct {
	Code    int         `json:"code"`
	Message string      `json:"message"`
	Data    interface{} `json:"data"`
}

// ServiceAccess 服务接入点列表返回的服务接入点信息
type ServiceAccessRsp struct {
	Description string      `json:"description"`
	Devices     []DeviceRsp `json:"devices"`
	ID          string      `json:"id"`
	Name        string      `json:"name"`
	Remark      string      `json:"remark"`
	Voucher     string      `json:"voucher"`
}

// Device 设备信息
type DeviceRsp struct {
	ID              string `json:"id"`
	Name            string `json:"name"`
	Voucher         string `json:"voucher"`
	IsEnabled       string `json:"is_enabled"`
	DeviceNumber    string `json:"device_number"`
	SubDeviceAddr   string `json:"sub_device_addr"`
	AdditionalInfo  string `json:"additional_info"`
	ProtocolConfig  string `json:"protocol_config"`
	DeviceConfigID  string `json:"device_config_id"`
	IsOnline        int    `json:"is_online"`
	ServiceAccessID string `json:"service_access_id"`
}
</document_content>
</document></documents>