

=== ..\..\..\tp-protocol-sdk-go\client\api_client.go ===

// client/api_client.go

package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"time"
)

// APIClient TP平台API客户端
type APIClient struct {
	baseURL    string       // API基础URL
	httpClient *http.Client // HTTP客户端
	logger     *log.Logger  // 日志记录器
}

// APIClientOption 定义客户端配置选项
type APIClientOption func(*APIClient)

// WithTimeout 设置超时时间选项
func WithTimeout(timeout time.Duration) APIClientOption {
	return func(c *APIClient) {
		c.httpClient.Timeout = timeout
	}
}

// WithLogger 设置日志记录器选项
func WithLogger(logger *log.Logger) APIClientOption {
	return func(c *APIClient) {
		c.logger = logger
	}
}

// NewAPIClient 创建新的API客户端实例
func NewAPIClient(baseURL string, opts ...APIClientOption) *APIClient {
	client := &APIClient{
		baseURL: baseURL,
		httpClient: &http.Client{
			Timeout: 30 * time.Second,
		},
		logger: log.New(log.Writer(), "[TP-SDK] ", log.LstdFlags|log.Lshortfile),
	}

	// 应用配置选项
	for _, opt := range opts {
		opt(client)
	}

	client.logger.Printf("初始化API客户端: baseURL=%s", baseURL)
	return client
}

// doRequest 执行HTTP请求并处理响应
func (c *APIClient) doRequest(ctx context.Context, method, path string, reqBody, respBody interface{}) error {
	// 构建完整URL
	url := fmt.Sprintf("%s%s", c.baseURL, path)
	c.logger.Printf("准备发送请求: method=%s, url=%s", method, url)

	// 序列化请求体
	var bodyReader io.Reader
	if reqBody != nil {
		bodyBytes, err := json.Marshal(reqBody)
		if err != nil {
			c.logger.Printf("请求体序列化失败: %v", err)
			return fmt.Errorf("序列化请求体失败: %w", err)
		}
		bodyReader = bytes.NewReader(bodyBytes)
		c.logger.Printf("请求体: %s", string(bodyBytes))
	}

	// 创建请求
	req, err := http.NewRequestWithContext(ctx, method, url, bodyReader)
	if err != nil {
		c.logger.Printf("创建请求失败: %v", err)
		return fmt.Errorf("创建请求失败: %w", err)
	}

	// 设置请求头
	if reqBody != nil {
		req.Header.Set("Content-Type", "application/json")
	}
	req.Header.Set("Accept", "application/json")

	// 执行请求
	startTime := time.Now()
	resp, err := c.httpClient.Do(req)
	if err != nil {
		c.logger.Printf("请求执行失败: %v", err)
		return fmt.Errorf("执行请求失败: %w", err)
	}
	defer resp.Body.Close()

	// 记录请求耗时
	c.logger.Printf("请求完成: 耗时=%v, 状态码=%d", time.Since(startTime), resp.StatusCode)

	// 读取响应体
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		c.logger.Printf("读取响应体失败: %v", err)
		return fmt.Errorf("读取响应体失败: %w", err)
	}

	// 检查状态码
	if resp.StatusCode != http.StatusOK {
		c.logger.Printf("请求返回非200状态码: status=%d, body=%s", resp.StatusCode, string(body))
		return fmt.Errorf("请求失败，状态码: %d, 响应: %s", resp.StatusCode, string(body))
	}

	// 解析响应体
	if respBody != nil {
		if err := json.Unmarshal(body, respBody); err != nil {
			c.logger.Printf("响应体解析失败: %v, body=%s", err, string(body))
			return fmt.Errorf("解析响应体失败: %w", err)
		}
		c.logger.Printf("响应体解析成功")
	}

	return nil
}

// Get 执行GET请求
func (c *APIClient) Get(ctx context.Context, path string, response interface{}) error {
	return c.doRequest(ctx, http.MethodGet, path, nil, response)
}

// Post 执行POST请求
func (c *APIClient) Post(ctx context.Context, path string, request, response interface{}) error {
	return c.doRequest(ctx, http.MethodPost, path, request, response)
}


=== ..\..\..\tp-protocol-sdk-go\client\client.go ===

// client/client.go

package client

import (
	"fmt"
	"log"
)

// Client SDK主客户端，整合所有功能
type Client struct {
	// API客户端
	api     *APIClient
	device  *DeviceAPI
	service *ServiceAPI

	// MQTT客户端
	mqtt *MQTTClient

	// 日志
	logger *log.Logger
}

// ClientConfig SDK客户端配置
type ClientConfig struct {
	// API配置
	BaseURL    string
	APITimeout int // 秒

	// MQTT配置
	MQTTBroker   string
	MQTTClientID string
	MQTTUsername string
	MQTTPassword string

	// 日志配置
	Logger *log.Logger
}

// NewClient 创建新的SDK客户端实例
func NewClient(config ClientConfig) (*Client, error) {
	// 设置默认logger
	logger := config.Logger
	if logger == nil {
		logger = log.New(log.Writer(), "[TP-SDK] ", log.LstdFlags|log.Lshortfile)
	}

	logger.Printf("初始化SDK客户端")

	// 创建API客户端
	apiClient := NewAPIClient(config.BaseURL, WithLogger(logger))
	if apiClient == nil {
		return nil, fmt.Errorf("创建API客户端失败")
	}

	// 创建MQTT客户端
	mqttClient := NewMQTTClient(MQTTConfig{
		Broker:   config.MQTTBroker,
		ClientID: config.MQTTClientID,
		Username: config.MQTTUsername,
		Password: config.MQTTPassword,
	}, logger)
	if mqttClient == nil {
		return nil, fmt.Errorf("创建MQTT客户端失败")
	}

	// 创建设备API和服务API
	deviceAPI := NewDeviceAPI(apiClient)
	serviceAPI := NewServiceAPI(apiClient)

	return &Client{
		api:     apiClient,
		device:  deviceAPI,
		service: serviceAPI,
		mqtt:    mqttClient,
		logger:  logger,
	}, nil
}

// Connect 连接到平台
func (c *Client) Connect() error {
	c.logger.Printf("开始连接平台")

	// 连接MQTT
	if err := c.mqtt.Connect(); err != nil {
		c.logger.Printf("MQTT连接失败: %v", err)
		return fmt.Errorf("MQTT连接失败: %w", err)
	}

	c.logger.Printf("平台连接成功")
	return nil
}

// Device 获取设备API操作接口
func (c *Client) Device() *DeviceAPI {
	return c.device
}

// Service 获取服务API操作接口
func (c *Client) Service() *ServiceAPI {
	return c.service
}

// MQTT 获取MQTT客户端
func (c *Client) MQTT() *MQTTClient {
	return c.mqtt
}

// Close 关闭客户端连接
func (c *Client) Close() {
	c.logger.Printf("开始关闭客户端连接")

	// 断开MQTT连接
	if c.mqtt != nil {
		c.mqtt.Disconnect()
	}

	c.logger.Printf("客户端连接已关闭")
}


=== ..\..\..\tp-protocol-sdk-go\client\device_api.go ===

// client/device_api.go

package client

import (
	"context"
	"fmt"

	"github.com/ThingsPanel/tp-protocol-sdk-go/types"
)

// DeviceAPI 设备相关API封装
type DeviceAPI struct {
	client *APIClient
}

// DeviceConfigRequest 获取设备配置请求
type DeviceConfigRequest struct {
	DeviceID     string `json:"device_id"`
	Voucher      string `json:"voucher"`
	DeviceNumber string `json:"device_number"`
}

// DeviceConfigResponse 设备配置响应
type DeviceConfigResponse struct {
	Code    int          `json:"code"`
	Message string       `json:"message"`
	Data    types.Device `json:"data"`
}

// NewDeviceAPI 创建设备API实例
func NewDeviceAPI(client *APIClient) *DeviceAPI {
	return &DeviceAPI{
		client: client,
	}
}

// GetDeviceConfig 获取设备配置信息
func (d *DeviceAPI) GetDeviceConfig(ctx context.Context, req *DeviceConfigRequest) (*DeviceConfigResponse, error) {
	d.client.logger.Printf("开始获取设备配置: deviceID=%s", req.DeviceID)

	var resp DeviceConfigResponse
	err := d.client.Post(ctx, "/api/v1/plugin/device/config", req, &resp)
	if err != nil {
		d.client.logger.Printf("获取设备配置失败: %v", err)
		return nil, fmt.Errorf("获取设备配置失败: %w", err)
	}

	d.client.logger.Printf("获取设备配置成功: deviceID=%s, deviceType=%s",
		req.DeviceID, resp.Data.DeviceType)
	return &resp, nil
}


=== ..\..\..\tp-protocol-sdk-go\client\mqtt_client.go ===

// client/mqtt_client.go

package client

import (
	"fmt"
	"log"
	"time"

	mqtt "github.com/eclipse/paho.mqtt.golang"
)

// MQTTClient MQTT客户端封装
type MQTTClient struct {
	client    mqtt.Client
	logger    *log.Logger
	broker    string
	clientID  string
	username  string
	password  string
	connected bool
}

// MessageHandler 定义消息处理函数类型
type MessageHandler func(topic string, payload []byte)

// MQTTConfig MQTT配置项
type MQTTConfig struct {
	Broker   string
	ClientID string
	Username string
	Password string
}

// NewMQTTClient 创建MQTT客户端实例
func NewMQTTClient(config MQTTConfig, logger *log.Logger) *MQTTClient {
	if logger == nil {
		logger = log.New(log.Writer(), "[TP-MQTT] ", log.LstdFlags|log.Lshortfile)
	}

	return &MQTTClient{
		broker:   config.Broker,
		clientID: config.ClientID,
		username: config.Username,
		password: config.Password,
		logger:   logger,
	}
}

// Connect 连接到MQTT服务器
func (m *MQTTClient) Connect() error {
	m.logger.Printf("开始连接MQTT服务器: broker=%s, clientID=%s", m.broker, m.clientID)

	opts := mqtt.NewClientOptions().
		AddBroker(m.broker).
		SetClientID(m.clientID).
		SetUsername(m.username).
		SetPassword(m.password).
		SetAutoReconnect(true).
		SetCleanSession(true).
		SetKeepAlive(30 * time.Second).
		SetConnectTimeout(30 * time.Second)

	// 设置连接丢失处理函数
	opts.SetConnectionLostHandler(func(client mqtt.Client, err error) {
		m.logger.Printf("MQTT连接丢失: %v", err)
		m.connected = false
	})

	// 设置连接建立处理函数
	opts.SetOnConnectHandler(func(client mqtt.Client) {
		m.logger.Printf("MQTT连接成功建立")
		m.connected = true
	})

	// 创建客户端实例
	m.client = mqtt.NewClient(opts)

	// 尝试连接
	if token := m.client.Connect(); token.Wait() && token.Error() != nil {
		m.logger.Printf("MQTT连接失败: %v", token.Error())
		return fmt.Errorf("MQTT连接失败: %w", token.Error())
	}

	m.logger.Printf("MQTT连接成功")
	return nil
}

// Publish 发布消息
func (m *MQTTClient) Publish(topic string, qos byte, payload interface{}) error {
	if !m.connected {
		return fmt.Errorf("MQTT客户端未连接")
	}

	m.logger.Printf("准备发布消息: topic=%s, qos=%d", topic, qos)

	token := m.client.Publish(topic, qos, false, payload)
	if token.Wait() && token.Error() != nil {
		m.logger.Printf("消息发布失败: %v", token.Error())
		return fmt.Errorf("消息发布失败: %w", token.Error())
	}

	m.logger.Printf("消息发布成功")
	return nil
}

// Subscribe 订阅主题
func (m *MQTTClient) Subscribe(topic string, qos byte, handler MessageHandler) error {
	if !m.connected {
		return fmt.Errorf("MQTT客户端未连接")
	}

	m.logger.Printf("准备订阅主题: topic=%s, qos=%d", topic, qos)

	// 将自定义的MessageHandler转换为mqtt.MessageHandler
	wrapper := func(client mqtt.Client, msg mqtt.Message) {
		handler(msg.Topic(), msg.Payload())
	}

	token := m.client.Subscribe(topic, qos, wrapper)
	if token.Wait() && token.Error() != nil {
		m.logger.Printf("主题订阅失败: %v", token.Error())
		return fmt.Errorf("主题订阅失败: %w", token.Error())
	}

	m.logger.Printf("主题订阅成功")
	return nil
}

// Disconnect 断开MQTT连接
func (m *MQTTClient) Disconnect() {
	if m.connected {
		m.logger.Printf("准备断开MQTT连接")
		m.client.Disconnect(250)
		m.connected = false
		m.logger.Printf("MQTT连接已断开")
	}
}

// IsConnected 检查是否已连接
func (m *MQTTClient) IsConnected() bool {
	return m.connected
}


=== ..\..\..\tp-protocol-sdk-go\client\service_api.go ===

// client/service_api.go

package client

import (
	"context"
	"fmt"

	"github.com/ThingsPanel/tp-protocol-sdk-go/types"
)

// ServiceAPI 服务接入相关API封装
type ServiceAPI struct {
	client *APIClient
}

// ServiceAccessRequest 获取服务接入点请求
type ServiceAccessRequest struct {
	ServiceAccessID   string `json:"service_access_id"`
	ServiceIdentifier string `json:"service_identifier"`
}

// ServiceAccessResponse 服务接入响应
type ServiceAccessResponse struct {
	Code    int                 `json:"code"`
	Message string              `json:"message"`
	Data    types.ServiceAccess `json:"data"`
}

// HeartbeatRequest 心跳请求
type HeartbeatRequest struct {
	ServiceIdentifier string `json:"service_identifier"`
}

// HeartbeatResponse 心跳响应
type HeartbeatResponse struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// NewServiceAPI 创建服务API实例
func NewServiceAPI(client *APIClient) *ServiceAPI {
	return &ServiceAPI{
		client: client,
	}
}

// GetServiceAccess 获取服务接入点信息
func (s *ServiceAPI) GetServiceAccess(ctx context.Context, req *ServiceAccessRequest) (*ServiceAccessResponse, error) {
	s.client.logger.Printf("开始获取服务接入点信息: serviceAccessID=%s", req.ServiceAccessID)

	var resp ServiceAccessResponse
	err := s.client.Post(ctx, "/api/v1/plugin/service/access", req, &resp)
	if err != nil {
		s.client.logger.Printf("获取服务接入点信息失败: %v", err)
		return nil, fmt.Errorf("获取服务接入点信息失败: %w", err)
	}

	s.client.logger.Printf("获取服务接入点信息成功: serviceIdentifier=%s",
		resp.Data.ServiceIdentifier)
	return &resp, nil
}

// SendHeartbeat 发送服务心跳
func (s *ServiceAPI) SendHeartbeat(ctx context.Context, req *HeartbeatRequest) (*HeartbeatResponse, error) {
	s.client.logger.Printf("开始发送服务心跳: serviceIdentifier=%s", req.ServiceIdentifier)

	var resp HeartbeatResponse
	err := s.client.Post(ctx, "/api/v1/plugin/heartbeat", req, &resp)
	if err != nil {
		s.client.logger.Printf("发送服务心跳失败: %v", err)
		return nil, fmt.Errorf("发送服务心跳失败: %w", err)
	}

	s.client.logger.Printf("发送服务心跳成功")
	return &resp, nil
}


=== ..\..\..\tp-protocol-sdk-go\example\_out_text\main.go ===

package main

import (
	"flag"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
)

func main() {
	// 命令行参数
	sourceDir := flag.String("src", ".", "源目录路径")
	outputFile := flag.String("out", "output.txt", "输出文件路径")
	exclude := flag.String("exclude", ".git,.idea,node_modules,vendor", "要排除的目录，用逗号分隔")
	fileTypes := flag.String("types", ".go,.java,.py,.js,.cpp,.h,.c,.txt", "要包含的文件类型，用逗号分隔")
	flag.Parse()

	// 转换排除目录和文件类型为map，便于快速查找
	excludeDirs := make(map[string]bool)
	for _, dir := range strings.Split(*exclude, ",") {
		excludeDirs[dir] = true
	}

	fileExtensions := make(map[string]bool)
	for _, ext := range strings.Split(*fileTypes, ",") {
		fileExtensions[ext] = true
	}

	// 创建输出文件
	out, err := os.Create(*outputFile)
	if err != nil {
		fmt.Printf("创建输出文件失败: %v\n", err)
		return
	}
	defer out.Close()

	// 遍历目录
	err = filepath.Walk(*sourceDir, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}

		// 检查是否是要排除的目录
		if info.IsDir() {
			if excludeDirs[info.Name()] {
				return filepath.SkipDir
			}
			return nil
		}

		// 检查文件扩展名
		ext := strings.ToLower(filepath.Ext(path))
		if !fileExtensions[ext] {
			return nil
		}

		// 写入文件路径作为分隔符
		fmt.Fprintf(out, "\n\n=== %s ===\n\n", path)

		// 打开并读取文件
		file, err := os.Open(path)
		if err != nil {
			return fmt.Errorf("打开文件 %s 失败: %v", path, err)
		}
		defer file.Close()

		// 复制文件内容到输出文件
		_, err = io.Copy(out, file)
		if err != nil {
			return fmt.Errorf("复制文件 %s 内容失败: %v", path, err)
		}

		return nil
	})

	if err != nil {
		fmt.Printf("处理过程中发生错误: %v\n", err)
		return
	}

	fmt.Println("文件合并完成!")
}

// go run . -src=../../../tp-protocol-sdk-go -out=result.txt -types=.go,.java -exclude=.git,vendor


=== ..\..\..\tp-protocol-sdk-go\example\handler\client\main.go ===

// examples/handler/client/main.go

package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"net/url"
	"os"
)

func main() {
	logger := log.New(os.Stdout, "[Client] ", log.LstdFlags|log.Lshortfile)
	baseURL := "http://localhost:8080"

	// 1. 测试获取表单配置
	logger.Println("测试获取表单配置...")
	formConfig := testGetFormConfig(baseURL, logger)
	logger.Printf("表单配置: %+v\n", formConfig)

	// 2. 测试设备断开连接
	logger.Println("\n测试设备断开连接...")
	testDeviceDisconnect(baseURL, "device-001", logger)

	// 3. 测试发送通知
	logger.Println("\n测试发送通知...")
	testSendNotification(baseURL, logger)

	// 4. 测试获取设备列表
	logger.Println("\n测试获取设备列表...")
	deviceList := testGetDeviceList(baseURL, logger)
	logger.Printf("设备列表: %+v\n", deviceList)
}

// 获取表单配置
func testGetFormConfig(baseURL string, logger *log.Logger) map[string]interface{} {
	// 构建请求URL和参数
	params := url.Values{}
	params.Add("protocol_type", "modbus")
	params.Add("device_type", "1")
	params.Add("form_type", "CFG")

	url := fmt.Sprintf("%s/api/v1/form/config?%s", baseURL, params.Encode())

	resp, err := http.Get(url)
	if err != nil {
		logger.Fatalf("请求失败: %v", err)
	}
	defer resp.Body.Close()

	var result map[string]interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		logger.Fatalf("解析响应失败: %v", err)
	}

	return result
}

// 测试设备断开连接
func testDeviceDisconnect(baseURL string, deviceID string, logger *log.Logger) {
	reqBody, err := json.Marshal(map[string]string{
		"device_id": deviceID,
	})
	if err != nil {
		logger.Fatalf("构建请求体失败: %v", err)
	}

	resp, err := http.Post(
		fmt.Sprintf("%s/api/v1/device/disconnect", baseURL),
		"application/json",
		bytes.NewBuffer(reqBody),
	)
	if err != nil {
		logger.Fatalf("请求失败: %v", err)
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		logger.Fatalf("读取响应失败: %v", err)
	}

	logger.Printf("响应: %s", string(body))
}

// 测试发送通知
func testSendNotification(baseURL string, logger *log.Logger) {
	notifyData := map[string]string{
		"message_type": "1",
		"message":      `{"service_access_id":"service-001"}`,
	}

	reqBody, err := json.Marshal(notifyData)
	if err != nil {
		logger.Fatalf("构建请求体失败: %v", err)
	}

	resp, err := http.Post(
		fmt.Sprintf("%s/api/v1/plugin/notification", baseURL),
		"application/json",
		bytes.NewBuffer(reqBody),
	)
	if err != nil {
		logger.Fatalf("请求失败: %v", err)
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		logger.Fatalf("读取响应失败: %v", err)
	}

	logger.Printf("响应: %s", string(body))
}

// 测试获取设备列表
func testGetDeviceList(baseURL string, logger *log.Logger) map[string]interface{} {
	// 构建请求URL和参数
	params := url.Values{}
	params.Add("voucher", "test-voucher")
	params.Add("service_identifier", "test-service")
	params.Add("page_size", "10")
	params.Add("page", "1")

	url := fmt.Sprintf("%s/api/v1/plugin/device/list?%s", baseURL, params.Encode())

	resp, err := http.Get(url)
	if err != nil {
		logger.Fatalf("请求失败: %v", err)
	}
	defer resp.Body.Close()

	var result map[string]interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		logger.Fatalf("解析响应失败: %v", err)
	}

	return result
}


=== ..\..\..\tp-protocol-sdk-go\example\handler\main.go ===

// examples/handler/main.go

package main

import (
	"log"
	"os"

	"github.com/ThingsPanel/tp-protocol-sdk-go/handler"
)

func main() {
	logger := log.New(os.Stdout, "[TP-Example] ", log.LstdFlags|log.Lshortfile)

	// 创建处理器
	h := handler.NewHandler(handler.HandlerConfig{
		Logger: logger,
	})

	// 设置表单配置处理函数
	h.SetFormConfigHandler(func(req *handler.GetFormConfigRequest) (interface{}, error) {
		logger.Printf("收到表单配置请求: type=%s", req.FormType)
		return map[string]interface{}{
			"fields": []map[string]interface{}{
				{
					"name":  "host",
					"type":  "string",
					"label": "服务器地址",
				},
				{
					"name":  "port",
					"type":  "number",
					"label": "端口",
				},
			},
		}, nil
	})

	// 设置设备断开连接处理函数
	h.SetDeviceDisconnectHandler(func(req *handler.DeviceDisconnectRequest) error {
		logger.Printf("设备断开连接: %s", req.DeviceID)
		return nil
	})

	// 设置通知处理函数
	h.SetNotificationHandler(func(req *handler.NotificationRequest) error {
		logger.Printf("收到通知: type=%s", req.MessageType)
		return nil
	})

	// 设置获取设备列表处理函数
	h.SetGetDeviceListHandler(func(req *handler.GetDeviceListRequest) (*handler.DeviceListResponse, error) {
		logger.Printf("获取设备列表: page=%d, pageSize=%d", req.Page, req.PageSize)
		return &handler.DeviceListResponse{
			Code:    200,
			Message: "success",
			Data: handler.DeviceListData{
				List: []handler.DeviceItem{
					{
						DeviceName:   "设备1",
						Description:  "测试设备1",
						DeviceNumber: "DEV001",
					},
					{
						DeviceName:   "设备2",
						Description:  "测试设备2",
						DeviceNumber: "DEV002",
					},
				},
				Total: 2,
			},
		}, nil
	})

	// 启动HTTP服务
	logger.Printf("启动HTTP服务...")
	if err := h.Start(":8080"); err != nil {
		logger.Fatalf("服务启动失败: %v", err)
	}
}


=== ..\..\..\tp-protocol-sdk-go\example\main.go ===

// examples/main.go

package main

import (
	"context"
	"log"
	"os"
	"time"

	"github.com/ThingsPanel/tp-protocol-sdk-go/client"
)

func main() {
	// 创建logger
	logger := log.New(os.Stdout, "[TP-Example] ", log.LstdFlags|log.Lshortfile)

	// 创建客户端配置
	config := client.ClientConfig{
		BaseURL:      "http://c.thingspanel.cn",
		MQTTBroker:   "mqtt://47.92.253.145:1883",
		MQTTClientID: "example-client",
		MQTTUsername: "plugin",
		MQTTPassword: "plugin",
		Logger:       logger,
	}

	// 创建SDK客户端
	c, err := client.NewClient(config)
	if err != nil {
		logger.Fatalf("创建客户端失败: %v", err)
	}
	defer c.Close()

	// 连接平台
	if err := c.Connect(); err != nil {
		logger.Fatalf("连接平台失败: %v", err)
	}

	// 获取设备配置示例
	deviceReq := &client.DeviceConfigRequest{
		DeviceID: "af13ac2c-3a9e-5ab9-cd31-0cf01f984b3c",
	}

	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	deviceResp, err := c.Device().GetDeviceConfig(ctx, deviceReq)
	if err != nil {
		logger.Printf("获取设备配置失败: %v", err)
	} else {
		logger.Printf("设备配置: %+v", deviceResp.Data)
	}

	// 发送服务心跳示例
	heartbeatReq := &client.HeartbeatRequest{
		ServiceIdentifier: "test3",
	}

	heartbeatResp, err := c.Service().SendHeartbeat(ctx, heartbeatReq)
	if err != nil {
		logger.Printf("发送心跳失败: %v", err)
	} else {
		logger.Printf("心跳响应: %+v", heartbeatResp)
	}

	// MQTT消息订阅示例
	err = c.MQTT().Subscribe("plugin/example/+", 1, func(topic string, payload []byte) {
		logger.Printf("收到消息: topic=%s, payload=%s", topic, string(payload))
	})
	if err != nil {
		logger.Printf("订阅主题失败: %v", err)
	}

	// 发布消息示例
	err = c.MQTT().Publish("devices/status/af13ac2c-3a9e-5ab9-cd31-0cf01f984b3c", 1, 1)
	if err != nil {
		logger.Printf("发布消息失败: %v", err)
	}

	// 保持运行一段时间
	time.Sleep(600 * time.Second)
}


=== ..\..\..\tp-protocol-sdk-go\handler\handler.go ===

// handler/handler.go

package handler

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"strconv"
)

// HandlerConfig 处理器配置
type HandlerConfig struct {
	Logger *log.Logger // 日志记录器
}

// Handler 回调处理器
type Handler struct {
	logger                  *log.Logger
	formConfigHandler       func(req *GetFormConfigRequest) (interface{}, error)
	deviceDisconnectHandler func(req *DeviceDisconnectRequest) error
	notificationHandler     func(req *NotificationRequest) error
	getDeviceListHandler    func(req *GetDeviceListRequest) (*DeviceListResponse, error)
}

// NewHandler 创建一个新的处理器实例
func NewHandler(config HandlerConfig) *Handler {
	logger := config.Logger
	if logger == nil {
		logger = log.New(log.Writer(), "[TP-Handler] ", log.LstdFlags|log.Lshortfile)
	}

	return &Handler{
		logger: logger,
	}
}

// parseQueryParams 解析查询参数
func parseQueryParams(r *http.Request, obj interface{}) error {
	// 这里可以使用反射来实现，为了简单起见，我们针对具体类型处理
	switch v := obj.(type) {
	case *GetFormConfigRequest:
		v.ProtocolType = r.URL.Query().Get("protocol_type")
		v.DeviceType = r.URL.Query().Get("device_type")
		v.FormType = r.URL.Query().Get("form_type")

		// 验证必填参数
		if v.ProtocolType == "" || v.DeviceType == "" || v.FormType == "" {
			return fmt.Errorf("missing required query parameters")
		}

	case *GetDeviceListRequest:
		v.Voucher = r.URL.Query().Get("voucher")
		v.ServiceIdentifier = r.URL.Query().Get("service_identifier")

		pageSize := r.URL.Query().Get("page_size")
		page := r.URL.Query().Get("page")

		if v.Voucher == "" || v.ServiceIdentifier == "" || pageSize == "" || page == "" {
			return fmt.Errorf("missing required query parameters")
		}

		var err error
		v.PageSize, err = strconv.Atoi(pageSize)
		if err != nil {
			return fmt.Errorf("invalid page_size")
		}

		v.Page, err = strconv.Atoi(page)
		if err != nil {
			return fmt.Errorf("invalid page")
		}
	}
	return nil
}

func (h *Handler) handleFormConfig(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodGet {
		h.writeError(w, http.StatusMethodNotAllowed, "method not allowed")
		return
	}

	var req GetFormConfigRequest
	if err := parseQueryParams(r, &req); err != nil {
		h.writeError(w, http.StatusBadRequest, err.Error())
		return
	}

	data, err := h.formConfigHandler(&req)
	if err != nil {
		h.writeError(w, http.StatusInternalServerError, err.Error())
		return
	}

	h.writeResponse(w, http.StatusOK, "success", data)
}

func (h *Handler) handleDeviceDisconnect(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodPost {
		h.writeError(w, http.StatusMethodNotAllowed, "method not allowed")
		return
	}

	var req DeviceDisconnectRequest
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		h.writeError(w, http.StatusBadRequest, "invalid request body")
		return
	}

	if err := h.deviceDisconnectHandler(&req); err != nil {
		h.writeError(w, http.StatusInternalServerError, err.Error())
		return
	}

	h.writeResponse(w, http.StatusOK, "success", nil)
}

func (h *Handler) handleNotification(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodPost {
		h.writeError(w, http.StatusMethodNotAllowed, "method not allowed")
		return
	}

	var req NotificationRequest
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		h.writeError(w, http.StatusBadRequest, "invalid request body")
		return
	}

	if err := h.notificationHandler(&req); err != nil {
		h.writeError(w, http.StatusInternalServerError, err.Error())
		return
	}

	h.writeResponse(w, http.StatusOK, "success", nil)
}

func (h *Handler) handleGetDeviceList(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodGet {
		h.writeError(w, http.StatusMethodNotAllowed, "method not allowed")
		return
	}

	var req GetDeviceListRequest
	if err := parseQueryParams(r, &req); err != nil {
		h.writeError(w, http.StatusBadRequest, err.Error())
		return
	}

	resp, err := h.getDeviceListHandler(&req)
	if err != nil {
		h.writeError(w, http.StatusInternalServerError, err.Error())
		return
	}

	h.writeResponse(w, http.StatusOK, "success", resp.Data)
}

func (h *Handler) writeError(w http.ResponseWriter, code int, message string) {
	h.writeResponse(w, code, message, nil)
}

func (h *Handler) writeResponse(w http.ResponseWriter, code int, message string, data interface{}) {
	w.Header().Set("Content-Type", "application/json")
	resp := CommonResponse{
		Code:    code,
		Message: message,
		Data:    data,
	}
	json.NewEncoder(w).Encode(resp)
}

// ServeHTTP 实现 http.Handler 接口
func (h *Handler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	h.logger.Printf("收到请求: %s %s", r.Method, r.URL.Path)

	switch r.URL.Path {
	case "/api/v1/form/config":
		h.handleFormConfig(w, r)
	case "/api/v1/device/disconnect":
		h.handleDeviceDisconnect(w, r)
	case "/api/v1/plugin/notification":
		h.handleNotification(w, r)
	case "/api/v1/plugin/device/list":
		h.handleGetDeviceList(w, r)
	default:
		http.NotFound(w, r)
	}
}

// SetFormConfigHandler 设置表单配置处理函数
func (h *Handler) SetFormConfigHandler(handler func(req *GetFormConfigRequest) (interface{}, error)) {
	h.formConfigHandler = handler
}

// SetDeviceDisconnectHandler 设置设备断开处理函数
func (h *Handler) SetDeviceDisconnectHandler(handler func(req *DeviceDisconnectRequest) error) {
	h.deviceDisconnectHandler = handler
}

// SetNotificationHandler 设置通知处理函数
func (h *Handler) SetNotificationHandler(handler func(req *NotificationRequest) error) {
	h.notificationHandler = handler
}

// SetGetDeviceListHandler 设置获取设备列表处理函数
func (h *Handler) SetGetDeviceListHandler(handler func(req *GetDeviceListRequest) (*DeviceListResponse, error)) {
	h.getDeviceListHandler = handler
}

// Start 启动HTTP服务
func (h *Handler) Start(addr string) error {
	h.logger.Printf("启动HTTP服务: %s", addr)
	return http.ListenAndServe(addr, h)
}


=== ..\..\..\tp-protocol-sdk-go\handler\types.go ===

// handler/types.go

package handler

// GetFormConfigRequest 获取表单配置请求
type GetFormConfigRequest struct {
	ProtocolType string `form:"protocol_type" binding:"required"` // 协议/服务标识符
	DeviceType   string `form:"device_type" binding:"required"`   // 1-设备 2-网关 3-子设备
	FormType     string `form:"form_type" binding:"required"`     // CFG-配置表单 VCR-凭证表单 SVCR-服务凭证表单
}

// DeviceDisconnectRequest 设备断开连接请求
type DeviceDisconnectRequest struct {
	DeviceID string `json:"device_id" binding:"required"`
}

// NotificationRequest 通知请求
type NotificationRequest struct {
	MessageType string `json:"message_type" binding:"required"` // 1-服务配置修改
	Message     string `json:"message,omitempty"`               // 消息内容
}

// GetDeviceListRequest 获取设备列表请求
type GetDeviceListRequest struct {
	Voucher           string `form:"voucher" binding:"required"`            // 凭证
	ServiceIdentifier string `form:"service_identifier" binding:"required"` // 服务标识符
	PageSize          int    `form:"page_size" binding:"required"`          // 每页数量
	Page              int    `form:"page" binding:"required"`               // 页数
}

// DeviceItem 设备列表项
type DeviceItem struct {
	DeviceName   string `json:"device_name"`
	Description  string `json:"description"`
	DeviceNumber string `json:"device_number"`
}

// DeviceListData 设备列表数据
type DeviceListData struct {
	List  []DeviceItem `json:"list"`
	Total int          `json:"total"`
}

// CommonResponse 通用响应结构
type CommonResponse struct {
	Code    int         `json:"code"`
	Message string      `json:"message"`
	Data    interface{} `json:"data,omitempty"`
}

// DeviceListResponse 设备列表响应
type DeviceListResponse struct {
	Code    int            `json:"code"`
	Message string         `json:"message"`
	Data    DeviceListData `json:"data"`
}


=== ..\..\..\tp-protocol-sdk-go\types\types.go ===

package types

// Device 设备信息结构体
type Device struct {
	ID           string                 `json:"id"`
	Voucher      string                 `json:"voucher"`
	DeviceNumber string                 `json:"device_number"`
	DeviceType   string                 `json:"device_type"`
	ProtocolType string                 `json:"protocol_type"`
	SubDevices   []SubDevice            `json:"sub_devices,omitempty"`
	Config       map[string]interface{} `json:"config"`
}

// SubDevice 子设备信息结构体
type SubDevice struct {
	DeviceID      string                 `json:"device_id"`
	Voucher       string                 `json:"voucher"`
	DeviceNumber  string                 `json:"device_number"`
	SubDeviceAddr string                 `json:"sub_device_addr"`
	Config        map[string]interface{} `json:"config"`
}

// ServiceAccess 服务接入信息结构体
type ServiceAccess struct {
	ServiceAccessID   string   `json:"service_access_id"`
	ServiceIdentifier string   `json:"service_identifier"`
	Voucher           string   `json:"voucher"`
	Description       string   `json:"description"`
	Remark            string   `json:"remark"`
	Devices           []Device `json:"devices"`
}

// CommonResponse 通用响应结构体
type CommonResponse struct {
	Code    int         `json:"code"`
	Message string      `json:"message"`
	Data    interface{} `json:"data"`
}
